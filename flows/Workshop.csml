start:
  remember is_sorted = false
  remember size = false
  remember category = false
  remember search = false
  remember cdc = false

	say Typing(3000)
	say "Je suis LecturaBot, je suis ton assistante de lecture üìö"
	goto actions

actions:
	say Question("Comment veux-tu d√©couvrir les lectures du moment ?",
	buttons=[
    Button("Recherche par titre üîç") as search_btn,
		Button("Avec des filtres ü§è") as filters_btn,
		Button("Les coups de coeur ‚ù§Ô∏è ADA") as cdc_btn
		])
	hold
	if (event match filters_btn) {
		remember cdc = false
    goto filter_books
	}
	else if (event match search_btn) {
		remember cdc = false
    goto search_books
	}
  else {
    remember cdc = true
    goto sort_books
  }


// ############################################################
// √Ä toi de jouer maintenant, il va falloir remplir les trous !
// ############################################################
filter_books:
  // 1 - √âcris la question que va poser le chatbot √† l'utilisateur
  say Question("Quel type de livres aimes tu ?",
  button_type="quick_reply",
	buttons=[
    Button("Social Science"),
    Button("Biography & Autobiography"),
    Button("Fiction")
  ])
  // 2 - Indique au chatbot d'attendre la r√©ponse de l'utilisateur ici
  hold
  // 3 - Indique au chatbot qu'il doit se souvenir de la r√©ponse de l'utilisateur
  // en la mettant dans une variable qu'on appelera  "category"
  remember category = event
  say "Moi aussi j'adore les ouvrages {{category}}"
  goto book_size
  
book_size:
  say Question("Quel est le nombre de pages id√©al pour toi ?",
	buttons=[
		Button("Moins de 400") as m400_btn,
		Button("Plus de 400") as p400_btn
		])
  hold
  // 4 - V√©rifie si l'utilisateur a cliqu√© sur le premier bouton ou sur le second
  if (event match m400_btn) {
    remember size = 400
  }
  else{
    remember size = 2000
  }
  // 5 - Indique au chatbot qu'il doit se rendre √† l'√©tape sort_books
  goto sort_books


sort_books:
  // 6 - Demande √† l'utilisateur si il souhaite que les r√©sultats soient trier par notes
  say Question("Est-ce que tu veux veux que les r√©sultats soient trier par notes ?",
	buttons=[
    // 7 - Ajoute deux boutons : oui et non
    Button("Oui ü§©") as yes_btn,
    Button("Non ü§î") as no_btn
	])
  // 8 - Indique au chatbot d'attendre la r√©ponse de l'utilisateur ici
  hold
  // 9 - Si l'utilisateur clique sur oui, cr√©e une variable "is_sorted" et mets le mot "true" √† l'interieur
  if (event match yes_btn) {
    remember is_sorted = true
  } else {
    remember is_sorted = false
  }
  // 10 - Indique au chatbot qu'il doit se rendre √† l'√©tape `display`
  goto display

search_books:
  say "Donne moi un mot-cl√©, je vais montrer les livres qui correspondent."
  hold
  remember search = event
  goto display

display:
	say "Roulement de tambours ü•Å"
	say Typing(3000)
  if (!size) remember size = ""
  if (!category) remember category = ""
  do res = Fn("ADA_lectures", cdc=cdc, is_sorted=is_sorted, size=size, category=category, search=search)
  do cards = []
  if (res.length() == 0) {
    say "Je n'ai pas trouv√© de livre, d√©sol√© üòî"
    goto start
  }
  foreach (val, index) in res {
    do newCard = Card(
      title=val.title,
      subtitle="{{val.year}} - {{val.note}} - ‚ù§Ô∏è{{val.cdc}}",
      image_url=val.image,
      buttons=[Button("En savoir plus", payload=val.id.to_string())]
    )
    if (index < 6) do cards.push(newCard)
  }
  say Carousel(
    cards = cards
  )
  goto moreInfos

moreInfos:
  hold
  do plop = event
  if (!plop.is_int()) goto start
  do book = Fn("ADA_lectures", id=plop.to_int())
  if (!book || !book.title) {
    say "Je n'ai pas trouv√© ce livre :-/"
    goto start
  }
  if (book.description) do description = book.description
  else do description = "Description manquante pour ce livre ü§î"
  if (book.year) do year = book.year
  else do year = ""
  say "**{{book.title}}** - {{year}}"
  say "Synopsis : {{description}}"
  say Url("D√©couvrir le livre", url="{{book.url}}")
  say Button("Chercher d'autres ouvrages")
  goto moreInfos
